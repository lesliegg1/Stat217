tau.cur <- tau.vec[t-1] ##FOLDED-t sampling
#tau.cand <- r.tfold(1, df=2, mn=tau.cur) #jumping distn centered on current
tau.cand <- r.tfold(1, df=2, s=4, mn=0)
l.p.cand <- lp.tauGy.t1(tau.cand, y.j, sig.j)
l.p.cur <- lp.tauGy.t1(tau.cur, y.j, sig.j)
l.j.cand <- log(un.tfold(tau.cand, df=2, s=4))
l.j.cur <- log(un.tfold(tau.cur, df=2, s=4))
#l.j.cand <- log(d.tfold(tau.cand,df=2,ncp=tau.cur))  #not correct
#l.j.cur <- log(d.tfold(tau.cur,df=2,ncp=tau.cand))   #not correct
log.rat <- l.p.cand - l.p.cur + l.j.cur - l.j.cand
r <- min(1, exp(log.rat))
ifelse(runif(1)<r, tau.vec[t] <- tau.cand, tau.vec[t] <- tau.cur)
tau.cur2 <- tau.vec2[t-1]  #UNIFORM sampling
#tau.cand2 <- r.tfold(1, df=2, mn=tau.cur2) #jumping distn centered on curr
tau.cand2 <- r.tfold(1, df=2, s=4, mn=0)
l.p.cand2 <- lp.tauGy.unif(tau.cand2, y.j, sig.j)
l.p.cur2 <- lp.tauGy.unif(tau.cur2, y.j, sig.j)
l.j.cand2 <- log(un.tfold(tau.cand2, df=2, s=4))
l.j.cur2 <- log(un.tfold(tau.cur2, df=2, s=4))
#l.j.cand2 <- log(d.tfold(tau.cand2,df=2,ncp=tau.cur2)) #not correct
#l.j.cur2 <- log(d.tfold(tau.cur2,df=2,ncp=tau.cand2)) #not correct
log.rat2 <- l.p.cand2 - l.p.cur2 + l.j.cur2 - l.j.cand2
r2 <- min(1, exp(log.rat2))
ifelse(runif(1)<r2, tau.vec2[t] <- tau.cand2, tau.vec2[t] <- tau.cur2)
}
#Plot histograms of posterior draws of tau from the two priors
#Overlay curves obtained in first part of the code
par(mfrow=c(2,1))
hist(tau.vec, nclass=20, col=gray(.5), freq=F, main="Folded-t prior",
xlab="tau|y", xlim=c(0,50), ylim=c(0,0.2))
lines(grid.tau, norm.grid.tau, col=3, lwd=2)  #marg. post with foldedt
hist(tau.vec2, nclass=40, col=gray(.5), freq=F, main="Unif prior",
xlab="tau|y", xlim=c(0,50), ylim=c(0,0.2))
lines(grid.tau, norm.grid.tau2, col=4, lwd=3, lty=1) #unif on tau
##Look at sample path plots to see where the draws came from
dev.new()
plot(1:nsamp, tau.vec2, type="n", main="Sample path plots", ylim=c(0,60))
lines(1:nsamp, tau.vec2, col=3)
lines(1:nsamp, tau.vec, col=2) #looks more reasonable to me?
legend(100,58, legend=c("folded-t prior (df=1, s=5)","Uniform prior"),
lwd=c(2,2), lty=c(1,1), col=c(2,3), bty="n")
plot(1:nsamp, log(tau.vec2), type="n", main="Sample path plots", ylim=c(-5,5))
lines(1:nsamp, log(tau.vec2), col=3)
lines(1:nsamp, log(tau.vec), col=2) #looks more reasonable to me?
legend(100,5.2, legend=c("folded-t prior (df=1, s=5)","Uniform prior"),
lwd=c(2,2), lty=c(1,1), col=c(2,3), bty="n")
###STEP 2: Obtain samples from p(mu|tau,y) = Normal(mu.hat,V.mu)
#Function to easily get a draw from mu|tau,y
#conditional posterior of mu in Normal (Equation 5.20 in text)
r.mu.g.tau.y <- function(tau, y.j, sig.j) {
V.mu <- 1/(sum(1/(sig.j^2 + tau^2)))
mu.hat <- (sum((1/(sig.j^2 + tau^2))*y.j))*V.mu
draw <- rnorm(1, mu.hat, sd=sqrt(V.mu))
return(draw)
}
#r.mu.g.tau.y(1, y.j=y.j, sig.j=sig.j)
#Actually get the draws under the two different priors for tau
mu.vec <- apply(cbind(tau.vec), 1, r.mu.g.tau.y, y.j=y.j, sig.j=sig.j)
mu.vec2 <- apply(cbind(tau.vec2), 1, r.mu.g.tau.y, y.j=y.j, sig.j=sig.j)
#Take a look at results for mu|y under the two different priors
par(mfrow=c(2,1))
hist(mu.vec, nclass=50, col=gray(.7), freq=F, main="Folded-t prior",
xlab="mu|y", xlim=c(-10,30))
hist(mu.vec2, nclass=50, col=gray(.7), freq=F, main="Improper Unif. prior",
xlab="mu|y", xlim=c(-10,30))
#Look at summary measures to help compare the marginal distributions of mu|y
# under the two priors
summary(mu.vec)
summary(mu.vec2)
quantile(mu.vec, c(0.025, .975))
quantile(mu.vec2, c(0.025, .975))
mean(mu.vec>28) #0
mean(mu.vec2>28) #0.003
###STEP 3: Obtain samples from (theta_{j}|mu,tau,y)=N(theta.j.hat, Vj)
#Function to get a draw
r.thetaj.g.mu.tau.y <- function(mu.tau, y.j, sig.j) {
V.j <- 1/((1/(sig.j^2)) + (1/(mu.tau[2]^2)))
theta.hat.j <- ((y.j/(sig.j^2)) + (mu.tau[1]/(mu.tau[2]^2)))*V.j
theta.draws <- rnorm(8, theta.hat.j, sqrt(V.j))
return(theta.draws)
}
#Apply function to get vector of draws for each theta.j
theta.mat <- t(apply(cbind(mu.vec,tau.vec), 1, r.thetaj.g.mu.tau.y, y.j=y.j,
sig.j=sig.j))
theta.mat2 <- t(apply(cbind(mu.vec2,tau.vec2), 1, r.thetaj.g.mu.tau.y,
y.j=y.j, sig.j=sig.j))
head(theta.mat)
head(mu.vec)
head(tau.vec)
tau.vec
tau.vec <- seq(0, 100, length=5000)
theta.mat <- t(apply(cbind(mu.vec,tau.vec), 1, r.thetaj.g.mu.tau.y, y.j=y.j,
sig.j=sig.j))
head(theta.mat)
str(cbind(mu.vec, tau.vec))
is.matrix(cbind(mu.vec, tau.vec))
head(cbind(mu.vec, tau.vefc))
head(cbind(mu.vec, tau.vec))
lik.vals <- apply(cbind(m, pi), 1, lik.fun, y.vec=y1.data)
head(lik.vals)
head(cbind(m, pi))
m <- seq(1, 100, by=0.1)
pi <- seq(0, 1, by=0.01)
grid.vals <- expand.grid(m=m, pi=pi)
head(as.matrix(grid.vals))
m <- seq(16, 100, by=0.1)
pi <- seq(0, 1, by=0.01)
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
lik.vals <- apply(grid.vals, 1, lik.fun, y.vec=y1.data)
head(lik.vals)
tail(lik.vals)
lik.vals
m <- seq(16, 100, by=1)
pi <- seq(0, 1, by=0.01)
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
lik.vals <- apply(grid.vals, 1, lik.fun, y.vec=y1.data)
lik.vals
?contour
contour(m, pi, lik.vals)
grid.vals[1]
grid.vals[,1]
contour(grid.vals[,1], grid.vals[,2], lik.vals)
grid.vals[,2]
contour(grid.vals, lik.vals)
m <- seq(16, 100, by=1)
pi <- seq(0, 1, length=length(m))
pi <- seq(0, 1, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
lik.vals <- apply(grid.vals, 1, lik.fun, y.vec=y1.data)
contour(m, pi, lik.vals)
is.matrix(lik.vals)
m <- seq(16, 100, by=1)
pi <- seq(0, 1, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
lik.vals <- matrix(apply(grid.vals, 1, lik.fun, y.vec=y1.data))
contour(m, pi, lik.vals)
# Write a function to get the log of the unnormalized posterior, so
# we can look at contour lines (make sure not going to infinity)
l.unpost.BDA3 <- function(phi,yvec,mvec) {
n <- length(yvec)
b <- exp(phi[2])/(1+exp(phi[1]))
a <- b*exp(phi[1])
llik <- n*(lgamma(a + b) - lgamma(a) - lgamma(b)) +
sum(lgamma(a + yvec) + lgamma(b + mvec - yvec) -
lgamma(a + b + mvec))
lprior <- -5/2*log(a+b)
lJacob <- log((1+ b^2)) - log(a*b*(a+b))
out <- llik + lprior + lJacob
return(out)
}
#example of contour plot....#Calculate l.unpost over a grid
phi.1 <- seq(-2.3,-1.3,length=100) #logit(eta) = log(alpha/beta)
phi.2 <- seq(1,5,length=100) #log(K) = log(alpha+beta)
phi.grid <- expand.grid(phi.1,phi.2)
l.unpost <- apply(phi.grid, 1, l.unpost.BDA3, yvec=rattumor.data[,1],
mvec=rattumor.data[,2])
setwd("~/0_webdev/leslie/Stat532/Rtutorials")
rattumor.data <- read.table("rats.asc", header=TRUE)
rattumor.data
#example of contour plot....#Calculate l.unpost over a grid
phi.1 <- seq(-2.3,-1.3,length=100) #logit(eta) = log(alpha/beta)
phi.2 <- seq(1,5,length=100) #log(K) = log(alpha+beta)
phi.grid <- expand.grid(phi.1,phi.2)
l.unpost <- apply(phi.grid, 1, l.unpost.BDA3, yvec=rattumor.data[,1],
mvec=rattumor.data[,2])
unpost <- exp(l.unpost - max(l.unpost))
unpost.mat <- matrix(unpost, nrow=length(phi.1), ncol=length(phi.2))
head(unpost.mat)
dlbinom(c(30, 0.5), y1.data)
lbinom(c(30, 0.5), y1.data)
ldbinom(c(30, 0.5), y1.data)
?ldbinom
??lbinom
??dbinom
lbinom <- function(m.pi, y.vec){
log(dbinom(y.vec, m.pi[1], m.pi[2]))
}
lik.fun <- function(m.pi, y.vec){
sum(lbinom(y.vec, m.pi[1], m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(16, 100, by=1)
pi <- seq(0, 1, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, lik.fun, y.vec=y1.data)
lik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi-y.vec)*log(1-m.pi[2]))
}
lik.fun(c(30, 0.5), y1.data)
lik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
lik.fun(c(30, 0.5), y1.data)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(16, 100, by=1)
pi <- seq(0, 1, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
contour(m, pi, lik.mat)
lik.vals
loglik.vals
cbind(grid.vals, loglik.vals)
head(cbind(grid.vals, loglik.vals))
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 100, by=1)
pi <- seq(0, 1, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
cbind(grid.vals, loglik.vals)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
head(lik.mat)
loglik.vals
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.vals
loglik.vals
l.unpost
m <- seq(27, 100, by=1)
pi <- seq(0.1, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
loglik.vals
head(loglik.vals)
tail(loglik.vals)
max(lik.vals)
max(loglik.vals)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.vals
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
contour(m, pi, lik.mat)
par(mfrow=c(1,1))
contour(m, pi, lik.mat)
contour(phi.1, phi.2, unpost.mat, levels=seq(0.05, 0.95, 0.1),
ylab=expression(log(alpha + beta)),xlab=expression(log(alpha/beta)))
?contour
contour(m, pi, lik.mat, xlab=expression(m), ylab=expression(pi))
contour(m, pi, lik.mat, xlab=expression(m), ylab=expression(pi), nlevels=10)
contour(m, pi, lik.mat, xlab=expression(m), ylab=expression(pi), nlevels=5)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 200, by=1)
pi <- seq(0.1, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
contour(m, pi, lik.mat, xlab=expression(m), ylab=expression(pi), nlevels=5)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 200, by=1)
pi <- seq(0.1, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
contour(m, pi, lik.mat, xlab=expression(m), ylab=expression(pi), nlevels=10)
contour(m, pi, lik.mat, xlab=expression(m), ylab=expression(pi))
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 300, by=1)
pi <- seq(0.1, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
contour(m, pi, lik.mat, xlab=expression(m), ylab=expression(pi))
?optim
optim(c(150, 0.2), loglik.fun)
optim(c(150, 0.2), loglik.fun, y.vec=y1.data)
max(loglik.vals)
which(loglik.vals==-14.18122)
?which
loglik.vals==-14.18122
which(loglik.vals==-14.18122)
which(loglik.vals==max(loglik.vals))
loglik.vals[11306,]
loglik.vals[11306]
head(loglik.vals)
grid.vals[11306]
grid.vals[11306,]
which(loglik.vals==max(loglik.vals))
98*0.22
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlab=expression(m), ylab=expression(pi))
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 200, by=1)
pi <- seq(0.1, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(0, 300), xlab=expression(m), ylab=expression(pi))
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 300), xlab=expression(m), ylab=expression(pi))
points(98, 0.22, col="red")
points(98, 0.22, col="red", pch=16)
points(98, 0.22, col="red", pch=16, cex=2)
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 200), xlab=expression(m), ylab=expression(pi))
points(98, 0.22, col="red", pch=16, cex=2)
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals))]
grid.max
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
grid.max
points(grid.max, col="red", pch=16, cex=2)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y2.data <- c(16, 18, 22, 25, 28)
m <- seq(28, 200, by=1)
pi <- seq(0.1, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y2.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 200), xlab=expression(m),
ylab=expression(pi))
points(grid.max, col="red", pch=16, cex=2)
grid.max
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y2.data <- c(16, 18, 22, 25, 28)
m <- seq(28, 200, by=1)
pi <- seq(0.1, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y2.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 200), ylim=c(0, 0.8), xlab=expression(m),
ylab=expression(pi))
points(grid.max, col="red", pch=16, cex=2)
points(grid.max, col="red", pch=16, cex=2)
grid.max
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 200, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 200), ylim=c(0, 0.8),
xlab=expression(m), ylab=expression(pi))
points(grid.max, col="red", pch=16, cex=2)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 200, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 200), ylim=c(0, 0.8),
xlab=expression(m), ylab=expression(pi))
points(grid.max, col="red", pch=16, cex=2)
grid.max
points(c(grid.max), col="red", pch=16, cex=2)
unlist(grid.max)
points(unlist(grid.max), col="red", pch=16, cex=2)
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y2.data <- c(16, 18, 22, 25, 28)
m <- seq(28, 200, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y2.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 200), ylim=c(0, 0.8),
xlab=expression(m),
ylab=expression(pi))
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 250, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 200), ylim=c(0, 0.8),
xlab=expression(m), ylab=expression(pi))
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 250, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 230), ylim=c(0, 0.8),
xlab=expression(m), ylab=expression(pi))
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y2.data <- c(16, 18, 22, 25, 28)
m <- seq(28, 250, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y2.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 230), ylim=c(0, 0.8),
xlab=expression(m),
ylab=expression(pi))
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y2.data <- c(16, 18, 22, 25, 28)
m <- seq(28, 250, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y2.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 230), ylim=c(0, 0.8),
xlab=expression(m), ylab=expression(pi), main=expression(y[2], paste(" data")))
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 230), ylim=c(0, 0.8),
xlab=expression(m), ylab=expression(pi), main=expression(paste(y[2], " data")))
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
grid.max
loglik.fun <- function(m.pi, y.vec){
sum(lchoose(m.pi[1], y.vec)+y.vec*log(m.pi[2])+(m.pi[1]-y.vec)*log(1-m.pi[2]))
}
y1.data <- c(16, 18, 22, 25, 27)
m <- seq(27, 250, by=1)
pi <- seq(0.05, 0.9, length=length(m))
grid.vals <- expand.grid(m=m, pi=pi)
grid.vals <- as.matrix(grid.vals)
loglik.vals <- apply(grid.vals, 1, loglik.fun, y.vec=y1.data)
lik.vals <- exp(loglik.vals-max(loglik.vals))
lik.mat <- matrix(lik.vals, nrow=length(m), ncol=length(pi))
#find where max occurs on grid
grid.max <- grid.vals[which(loglik.vals==max(loglik.vals)),]
contour(m, pi, lik.mat, levels=seq(0.05, 0.95, 0.1), xlim=c(20, 230), ylim=c(0, 0.8),
xlab=expression(m), ylab=expression(pi), main=expression(paste(y[1], " data"))))
points(grid.max[1], grid.max[2], col="red", pch=16, cex=2)
grid.max
setwd("~/webdev/leslie/Stat217/mlrintro(11-9)")
setwd("~/nick/0_webdev/leslie/Stat217/mlrintro11.9")
setwd("~/0_webdev/leslie/Stat217/mlrintro11.9")
snow <- read.csv("snotel_s.csv", head=T)
