mu.vec2 <- matrix(NA, nrow=n.gibbs, ncol=nchain)
sigmasq.vec2 <- matrix(NA, nrow=n.gibbs, ncol=nchain)
tausq.vec <- matrix(NA, nrow=n.gibbs, ncol=nchain)
alphasq.vec <- matrix(NA, nrow=n.gibbs, ncol=nchain)
U.mat <- array(NA, dim=c(n.gibbs, length(y.data), nchain))
V.mat2 <- array(NA, dim=c(n.gibbs, length(y.data), nchain))
##3. Set initial values
mu.vec2[1,] <-  c(10.2, 9.8, 10.5)  #initial value for mu
tausq.vec[1,] <- c(.1, .3, 1)
alphasq.vec[1,] <- c(4, 2, 3)
sigmasq.vec2[1,] <- c(1, 3, 15)   #initial value for sigmasq
U.mat[1,,1] <- rep(10, length(y.data)) #initial values for U_i's in chain 1
U.mat[1,,2] <- rep(20, length(y.data)) #initial values for U_i's in chain 2
U.mat[1,,3] <- rep(15, length(y.data)) #initial values for U_i's in chain 3
##4. NOW Set up the d steps for each iteration ##
for (k in 1:nchain) {
for (t in 2:n.gibbs) {
## First update the vector of U_j's
for (j in 1:length(y.data)) {
U.mat[t,j,k] <- rinvgamma(1, (nu+1)/2,
(nu*tausq.vec[t-1,k] +
(y.data[j]-mu.vec2[t-1,k])^2 /
alphasq.vec[t-1,k])/2)
V.mat2[t,j,k] <- alphasq.vec[t-1,k]*U.mat[t,j,k]
}
# Update mu
mu.vec2[t,k] <- rnorm(1, sum(y.data/V.mat2[t,,k])/sum(1/V.mat2[t,,k]),
1/sum(V.mat2[t,,k]))
# Update tausq
tausq.vec[t,k] <- rgamma(1, n*nu/2, nu/2*sum(1/U.mat[t,,k]))
#update alphasq
alphasq.vec[t,k] <- rinvgamma(1, n/2, sum((y.data-mu.vec2[t,k])^2/U.mat[t,,k]))
#track sigmasq
sigmasq.vec2[t,k] <- alphasq.vec[t,k]*tausq.vec[t,k]
}
}
plot(seq(1:n.gibbs), sigmasq.vec[,1], type="l", ylab=expression(sigma^2))
lines(seq(1:n.gibbs), sigmasq.vec[,2], col=2)
lines(seq(1:n.gibbs), sigmasq.vec[,3], col=3)
plot(seq(1:n.gibbs), sigmasq.vec2[,1], type="l", ylab=expression(sigma^2))
lines(seq(1:n.gibbs), sigmasq.vec2[,2], col=2)
lines(seq(1:n.gibbs), sigmasq.vec2[,3], col=3)
plot(seq(1:n.gibbs), V.mat2[,1,1], type="l", ylab=expression(V[1]))
lines(seq(1:n.gibbs), V.mat2[,1,2], col=2)
lines(seq(1:n.gibbs), V.mat2[,1,3], col=3)
plot(seq(1:n.gibbs), V.mat[,2,1], type="l", ylab=expression(V[2]))
lines(seq(1:n.gibbs), V.mat2[,2,2], col=2)
lines(seq(1:n.gibbs), V.mat2[,2,3], col=3)
plot(seq(1:n.gibbs), V.mat2[,2,1], type="l", ylab=expression(V[2]))
lines(seq(1:n.gibbs), V.mat2[,2,2], col=2)
lines(seq(1:n.gibbs), V.mat2[,2,3], col=3)
plot(seq(1:n.gibbs), V.mat[,3,1], type="l", ylab=expression(V[3]))
lines(seq(1:n.gibbs), V.mat2[,3,2], col=2)
lines(seq(1:n.gibbs), V.mat2[,3,3], col=3)
plot(seq(1:n.gibbs), V.mat2[,3,1], type="l", ylab=expression(V[3]))
lines(seq(1:n.gibbs), V.mat2[,3,2], col=2)
lines(seq(1:n.gibbs), V.mat2[,3,3], col=3)
plot(seq(1:n.gibbs), V.mat[,1,1], type="l", ylab=expression(V[1]))
lines(seq(1:n.gibbs), V.mat[,1,2], col=2)
lines(seq(1:n.gibbs), V.mat[,1,3], col=3)
plot(seq(1:n.gibbs), V.mat[,2,1], type="l", ylab=expression(V[2]))
lines(seq(1:n.gibbs), V.mat[,2,2], col=2)
lines(seq(1:n.gibbs), V.mat[,2,3], col=3)
plot(seq(1:n.gibbs), V.mat[,3,1], type="l", ylab=expression(V[3]))
lines(seq(1:n.gibbs), V.mat[,3,2], col=2)
lines(seq(1:n.gibbs), V.mat[,3,3], col=3)
plot(x, function(x){x/(1+e^x)^2})
x <- seq(-100, 100, by=0.1)
plot(x, function(x){x/(1+e^x)^2})
x <- seq(-100, 100, by=0.1)
plot(x, x/(1+e^x)^2)
plot(x, x/(1+exp(x))^2)
plot(x, x/(1+exp(x))^2, type="l")
plot(x, x/((1+exp(x))^2), type="l")
log(0.3)
x <- seq(-10, 10, by=0.1)
plot(x, x/((1+exp(x))^2), type="l")
x <- seq(0, 10, by=0.1)
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 1,1))
plot(x, dgamma(x, 2,2))
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 2,2), type-"l")
plot(x, dgamma(x, 2,2), type="l")
par(mfrow=c(1,2))
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 2,2), type="l")
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 3,3), type="l")
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 1.5,1.5), type="l")
x <- seq(0, 10, by=0.1)
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 1.2,1.2), type="l")
x <- seq(0, 10, by=0.1)
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 2,2), type="l")
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 2,5), type="l")
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 2,1), type="l")
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 2,1.4), type="l")
plot(x, x/((1+exp(x))^2), type="l")
plot(x, dgamma(x, 2,1.5), type="l")
logit(1/2)
log(2)
logit(1/3)
seq(0.01, 0.3, length=20)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(alpha, beta)
}
eta <- alpha/(alpha+beta)
kappa <- alpha+beta
theta1 <- logit(eta)
theta2 <- log(kappa)
theta1 ~ dnorm(0, .0001)
theta2 ~ dgamma(2, 1.5)
}",
file="jags-betabinomial.jags")
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
#### Applied problem  (Tsutakawa et al. 1985) - Estimate rate of death from
## stomach cancer for at risk males between ages 45-64 for the largest cities in
## Missouri.  Here are the mortality rates for 20 of the cities
##  (number at risk (nj), number of cancer deaths (yj))
nj.vec <- c(1083,855,3461,657,1208,1025, 527, 1668, 583, 582, 917, 857, 680, 917, 53637,
874, 395, 581, 588, 383)
yj.vec <- c(0,0,2,0,1,1,0,2,1,3,0,1,1,1,54,0,0,1,3,0)
expit <- function(x) {exp(x)/(1+exp(x))}
logit <- function(x) { log(x/(1-x))}
# define values from stomach cancer data
set.seed(459)
n <- length(nj.vec)
m <- nj.vec
require(arm)
phi.data <- rnorm(10, mean=0.2, sd=1)
y.data <- yj.vec
##jags call
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = 0, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = -0.7, theta2 = .2),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10),
theta1 = 1, theta2 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
#parameters to save
params <- c("pi", "eta", "kappa", "theta1", "theta2")
n.iter=1000
#running the model for real
betabinom <- coda.samples(warmup.betabinom, params, n.iter=n.iter)
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(alpha, beta)
}
eta <- alpha/(alpha+beta)
kappa <- alpha+beta
theta1 <- logit(eta)
theta2 <- log(kappa)
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
eta <- a.0/(a.0+b.0)
kappa <- a.0+b.0
theta1 <- logit(eta)
theta2 <- log(kappa)
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
theta1 <- logit(eta)
theta2 <- log(kappa)
eta <- a.0/(a.0+b.0)
kappa <- a.0+b.0
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
theta1 <- logit(eta)
theta2 <- log(kappa)
eta <- a.0/(a.0+b.0)
kappa <- a.0+b.0
}",
file="jags-betabinomial.jags")
##jags call
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1)
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
#parameters to save
params <- c("pi", "eta", "kappa")
n.iter=1000
#running the model for real
betabinom <- coda.samples(warmup.betabinom, params, n.iter=n.iter)
inits
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1))
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1))
inits
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
stomach.data
inits
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
params <- c("pi", "eta", "kappa")
n.iter=1000
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
a.0 ~ dnorm(0, 0.0001)
b.0 ~ dnorm(0, 0.0001)
}",
file="jags-betabinomial.jags")
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), a.0 = 2, b.0 = .7),
list(pi=seq(0.2, 0.0001, length=20), a.0 = 1.5, b.0 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
a.0 = 1, b.0 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
params <- c("pi", "a.0", "b.0")
n.iter=1000
betabinom <- coda.samples(warmup.betabinom, params, n.iter=n.iter)
betabinom
summary(betabinom)
Rhat(betabinom)
neffective(betabinom)
effectiveSize(betabinom)
Rhat(betabinom)
gelman.diag(betabinom)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
a.0 ~ dunif(0, 1000)
b.0 ~ dunif(0, 1000)
}",
file="jags-betabinomial.jags")
##jags call
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), a.0 = 2, b.0 = .7),
list(pi=seq(0.2, 0.0001, length=20), a.0 = 1.5, b.0 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
a.0 = 1, b.0 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
#parameters to save
params <- c("pi", "a.0", "b.0")
n.iter=1000
#running the model for real
betabinom <- coda.samples(warmup.betabinom, params, n.iter=n.iter)
gelman.diag(betabinom)
effectiveSize(betabinom)
##jags call
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), a.0 = 2, b.0 = .7),
list(pi=seq(0.2, 0.0001, length=20), a.0 = 1.5, b.0 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
a.0 = 1, b.0 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
#parameters to save
params <- c("pi", "a.0", "b.0")
n.iter=10000
#running the model for real
betabinom <- coda.samples(warmup.betabinom, params, n.iter=n.iter)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
a.0 <- kappa/eta
b.0 <- kappa-kappa/eta
theta1 <- logit(eta)
theta2 <- log(kappa)
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
}",
file="jags-betabinomial.jags")
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
a.0 <- kappa/eta
b.0 <- kappa-kappa/eta
eta <- e^theta1/(1+e^theta1)
kappa <- e^theta2
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
}",
file="jags-betabinomial.jags")
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(pi=seq(0.0001, 0.2, length=20), theta1 = -1, theta2 = .7),
list(pi=seq(0.2, 0.0001, length=20), theta1 = 1.5, theta2 = 3),
list(pi=c(seq(0.1, 0.2, length=10), seq(0.0001, 0.1, length=10)),
theta1 = 1, theta2 = 1))
n.chain <- 3
#warmup
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
a.0 <- kappa/eta
b.0 <- kappa-kappa/eta
eta <- e^theta1/(1+e^theta1)
kappa <- e^theta2
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
theta1 <- logit(eta)
theta2 <- log(kappa)
}
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
a.0 <- kappa/eta
b.0 <- kappa-kappa/eta
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
theta1 ~ dnorm(0, 0.0001)
theta2 ~ dnorm(0, 0.0001)
eta <- a.0/b.0
kappa <- a.0+b.0
theta1 <- logit(eta)
theta2 <- log(kappa)
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
head(betabinom)
betabinom$mu
betabinom$pi[15]
hist(as.matrix(betabinom[,20]))
n.iter
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
eta ~ dnorm(0, 0.0001)
kappa ~ dnorm(0, 0.0001)
eta <- a.0/b.0
kappa <- a.0+b.0
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, n.adapt=3000, quiet=TRUE)
##write model file first
cat("
model
{
for(i in 1:N)
{
y[i] ~ dbin(pi[i], n[i])
pi[i] ~ dbeta(a.0, b.0)
}
eta ~ dnorm(0, 0.0001)
kappa ~ dnorm(0, 0.0001)
eta <- a.0/(a.0+b.0)
kappa <- a.0+b.0
}",
file="jags-betabinomial.jags")
warmup.betabinom <- jags.model("jags-betabinomial.jags", data=stomach.data, n.chains=n.chain, n.adapt=3000, quiet=TRUE)
