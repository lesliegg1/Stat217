pt=read.csv("http://dl.dropboxusercontent.com/u/77307195/pt.csv")
pt=read.csv("http://dl.dropboxusercontent.com/u/77307195/pt.csv")
pt <- read.csv("~/Documents/Stat217Spring2015/Inclass/twowayintvsadd/pt.csv", head=T)
pt
intplot(responses~brand*drops, data=pt)
??intplot
require(mosaic)
intplot(responses~brand*drops, data=pt)
anova(pt)
lm.fit <- lm(responses~brand*drops, data=pt)
anova(lm.fit)
summary(lm.fit)
require(car)
Anova(lm.add)
lm.add <- lm(responses~brand+drops, data=pt)
require(car)
Anova(lm.add)
summary(lm.add)
intplot<-function (formula = NULL, data = NULL, type = "b", x.cont = FALSE,
legend = TRUE, trace.label = NULL, leg.lab = NULL, fixed = FALSE,
x.leg = NULL, y.leg = NULL, cex.leg = 1, ncol = 1, pch = c(16,
21, 15, 22, 17, 24, c(3:14)), fun = function(x) mean(x,
na.rm = TRUE), ci.fun = function(x) c(fun(x) - se(x),
fun(x) + se(x)), err.width = if (length(levels(as.factor(x.factor))) >
10) 0 else 0.1, err.col = col, err.lty = 1, xlim = NULL,
ylim = NULL, cex = NULL, lwd = NULL, col = "black", cex.axis = 1,
xaxt = "s",main=NULL ,cld=F, cldshift=0.1,cldcol="white", ...)
{
#Modifications by Mark Greenwood, September, 2014 based on interface from compareCatsL by Bryan Hanson, DePauw Univ, Jan 2010 and using the lineplot.CI from the sciplot package
se<-function (x, na.rm = TRUE){ sqrt(var(x, na.rm = na.rm)/length(x[complete.cases(x)]))}
fun <- eval(substitute(fun), envir = data)
ci.fun = eval(substitute(ci.fun),envir=data)
#
response <- eval(parse(text=as.character(formula[[2]])),data)
respname<-formula[[2]]
x.factor <- factor(eval(parse(text=as.character(formula[[3]][3])),data))
xfname<-((formula[[3]][[3]]))
group <- factor(eval(parse(text=as.character(formula[[3]][2])),data))
grpname<-(formula[[3]][[2]])
#
subset = NULL
int.plot <- function(x.factor = x.factor, group = group,
response = response, type = c("l", "p", "b"), legend = legend,
trace.label = deparse(substitute(group)), fixed = FALSE,
xlab = deparse(xfname), ylab = ylabel,
lty = nc:1, pch = NA, xpd = NULL, leg.bg = par("bg"),
leg.bty = "n", xtick = FALSE, xlim = xlim, ylim = ylim,
axes = TRUE, ...) {
ylabel <- paste("Mean of ", deparse(respname), "plus/minus 1 SE")
mainlabel=main
if (is.null(mainlabel))    mainlabel<- paste("Interaction plot of", deparse(respname), "based on",deparse(xfname), "and", deparse(grpname) )
type <- match.arg(type)
cells <- tapply(response, list(x.factor, group), fun)
nr <- nrow(cells)
nc <- ncol(cells)
xvals <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nr
if (is.ordered(x.factor)) {
wn <- getOption("warn")
options(warn = -1)
xnm <- as.numeric(levels(x.factor))
options(warn = wn)
if (!any(is.na(xnm)))
xvals <- xnm
}
xlabs <- rownames(cells)
ylabs <- colnames(cells)
nch <- max(sapply(ylabs, nchar, type = "width"))
if (is.null(xlabs))
xlabs <- as.character(xvals)
if (is.null(ylabs))
ylabs <- as.character(1:nc)
if (is.null(xlim)) {
xlim <- range(xvals)
xleg <- xlim[2] + 0.05 * diff(xlim)
xlim <- xlim + c(-0.2/nr, if (legend & is.null(x.leg) &
is.null(y.leg)) 0.2 + 0.02 * nch else 0.2/nr) *
diff(xlim)
}
else {
xlim
xleg <- xlim[2] - 0.25 * diff(xlim)
}
matplot(xvals, cells, ..., type = type, xlim = xlim,
ylim = ylim, xlab = xlab, ylab = ylab, axes = axes,
xaxt = "n", col = col, lty = lty, lwd = lwd, pch = pch,main=mainlabel)
if (axes && xaxt != "n") {
axisInt <- function(x, main, sub, lwd, bg, log, asp,
...) axis(1, x, ...)
mgp. <- par("mgp")
if (!xtick)
mgp.[2] <- 0
axisInt(1, at = xvals, labels = xlabs, tick = xtick,
mgp = mgp., xaxt = xaxt, ...)
}
ord <- sort.list(cells[nr, ], decreasing = TRUE)
if (legend) {
yrng <- diff(ylim)
yleg <- ylim[2] - 0.1 * yrng
if (!is.null(xpd) || {
xpd. <- par("xpd")
!is.na(xpd.) && !xpd. && (xpd <- TRUE)
}) {
op <- par(xpd = xpd)
on.exit(par(op))
}
text(xleg, ylim[2] - 0.05 * yrng, paste("  ", trace.label),
adj = 0)
if (!fixed) {
ylabs <- ylabs[ord]
lty <- lty[1 + (ord - 1)%%length(lty)]
col <- col[1 + (ord - 1)%%length(col)]
pch <- pch[ord]
}
}
invisible()
return.data <- if (legend)
list(pch = pch, ord = ord, xleg = xleg, yleg = yleg,
ylabs = ylabs, lty = lty, leg.bty = leg.bty,
leg.bg = leg.bg, ord = ord, xvals = xvals, cells = cells)
else list(pch = pch, ord = ord, xvals = xvals)
return(return.data)
}
if (length(group[[1]]) > 1)
group <- factor(interaction(group, lex.order = TRUE))
group <- factor(group)
groups <- list(x.factor, group)
mn.data <- tapply(response, groups, fun)
CI.data <- tapply(response, groups, ci.fun)
plot.limits = c(min(c(unlist(mn.data), unlist(CI.data)),
na.rm = TRUE), max(c(unlist(mn.data), unlist(CI.data)),
na.rm = TRUE))
if (is.null(group)) {
nlevels.x <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nrow(mn.data)
plot(nlevels.x, mn.data, xaxt = "n", type = type, col = col,
pch = NA, cex = cex, cex.axis = cex.axis, lwd = lwd,
xlim = if (is.null(xlim)) {
c(min(nlevels.x) - 0.2, max(nlevels.x) + 0.2)
}
else xlim, ylim = if (is.null(ylim))
plot.limits
else ylim, ...)
if (xaxt != "n")
axis(1, labels = names(mn.data), at = nlevels.x,
cex.axis = cex.axis, ...)
}
else leg.vals <- int.plot(x.factor, group, response, type = type,
xlim = xlim, ylim = if (is.null(ylim))
plot.limits
else ylim, cex.axis = cex.axis, trace.label = trace.label,
pch = NA, legend = legend, ...)
if (is.null(group)) {
nlevels.x <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nrow(mn.data)
CI.seln <- !is.na(mn.data)
CI.plot <- matrix(unlist(CI.data[CI.seln]), nrow = sum(CI.seln),
byrow = TRUE)
arrows(nlevels.x[CI.seln], CI.plot[, 1], nlevels.x[CI.seln],
CI.plot[, 2], angle = 90, col = err.col, length = err.width,
code = 3, lwd = lwd, lty = err.lty)
}
else {
nlevels.y <- ncol(mn.data)
for (i in 1:nlevels.y) {
CI.seln <- !is.na(mn.data)[, i]
CI.plot <- matrix(unlist(CI.data[CI.seln, i]), nrow = sum(CI.seln),
byrow = TRUE)
arrows(leg.vals$xvals[CI.seln], CI.plot[, 1], leg.vals$xvals[CI.seln],
CI.plot[, 2], angle = 90, length = err.width,
col = if (length(err.col) > 1)
err.col[i]
else err.col, lty = if (length(err.lty) > 1)
err.lty[i]
else err.lty, code = 3, lwd = lwd)
}
}
if (type %in% c("p", "b")) {
if (is.null(group)) {
nlevels.x <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nrow(mn.data)
points(nlevels.x, mn.data, pch = pch[1], bg = "white",
cex = cex, col = col)
}
else {
nlevels.y <- dim(mn.data)[2]
for (i in 1:nlevels.y) points(leg.vals$xvals, mn.data[,
i], pch = pch[i], bg = "white", col = if (length(col) >
1)
col[i]
else col, cex = cex)
}
}
if (legend & !is.null(group)) {
legend(x = if (is.null(x.leg))
leg.vals$xleg
else x.leg, y = if (is.null(y.leg))
leg.vals$yleg
else y.leg, legend = if (!is.null(leg.lab))
leg.lab
else {
if (fixed)
levels(as.factor(unlist(group)))
else leg.vals$ylabs
}, pch = if (type %in% c("p", "b")) {
if (!fixed)
pch[leg.vals$ord]
else pch
}, col = if (type %in% c("p", "b")) {
if (!fixed & length(col) > 1)
col[leg.vals$ord]
else col
}, lty = if (type %in% c("l", "b")) {
if (fixed)
leg.vals$lty[order(leg.vals$ord)]
else leg.vals$lty
}, ncol = ncol, bty = leg.vals$leg.bty, bg = leg.vals$leg.bg,
cex = cex.leg)
}
if (cld==T){
#First, flatten two way model and run Tukey HSD
#Create interaction version of two-way ANOVA model:
intvar<-interaction(x.factor,group)
require(multcomp)
cldres<-cld(glht(lm(response~intvar),linfct=mcp(intvar="Tukey")))
ymeans<-predict(lm(response~intvar),newdata=data.frame(intvar=levels(intvar)))
#Then put letters from compact letter display (CLD) on the plot at close to correct locations
if (cldcol=="white"){cldcol<-as.numeric((data.frame(cldres$mcletters$Letters))[,1])+1}
#Need x-location from x.factor
text(x=rep(1:length(levels(x.factor)),length(unique(group))),y=ymeans+cldshift, labels=cldres$mcletters$Letters,col=cldcol,cex=1.3*cex.axis)
}
invisible(list(vals = mn.data, CI = CI.data))
}
intplot(responses~brand*drops,data=pt)
require(openintro)
data(satGPA)
satGPA$SEX<-factor(satGPA$sex)
levels(satGPA$SEX)<-c("MALE","FEMALE")
satGPA$SEXINDICATOR<-as.numeric(satGPA$SEX=="FEMALE")
SATSex2<-lm(FYGPA~SATM*SEX,data=satGPA)
summary(SATSex2)
separate.out <- lm(Force ~ Height*Species, data=crab.data)
crab.data <- read.csv("~/Documents/Stat411/data/CrabData.csv", head=TRUE)
crab.data$Species <- c(rep("nudus",14),rep("bellus",12),rep("productus",12))
parallel.out <- lm(Force ~ Height+Species, data=crab.data)
separate.out <- lm(Force ~ Height*Species, data=crab.data)
summary(parallel.out)
summary(separate.out)
anova(separate.out)
require(heplots)
data(Headache)
??Headache
data(census)
data(gifted)
??gifted
require(survey)
data(api)
install.packages("survey")
require(survey)
data(api)
require(mosaic)
tally(~stype,data=apipop)
tally(~stype,data=apistrat)
#tally(sch.wide~stype,data=apistrat)
par(mfrow=c(1,2))
boxplot(growth~stype,data=apistrat,ylab="Growth",ylim=c(-55,160))
beanplot(growth~stype,data=apistrat ,log="",col="beige",method="jitter",ylim=c(-55,160))
require(beanplot)
par(mfrow=c(1,2))
boxplot(growth~stype,data=apistrat,ylab="Growth",ylim=c(-55,160))
beanplot(growth~stype,data=apistrat ,log="",col="beige",method="jitter",ylim=c(-55,160))
m1<-lm(growth~stype,data=apistrat)
require(car)
Anova(m1)
plot(m1)
data(SexualFun) #Already a contengency table
plot(SexualFun)
t1=chisq.test(SexualFun)
t1$expected
mosaicplot(SexualFun)
mosaicplot(SexualFun,shade=T)
mosaicplot(t1$expected)
?SexualFun
??SexualFun
apistrat$growthcut<-cut(apistrat$growth,breaks=c(-47,6.75,25,48,133))
head(apistrat)
growthtable<-tally(~stype+growthcut,data=apistrat,margins=F)
growthtable
tally(~stype,data=apistrat)
help(api)
brand <- c(rep("Honda", 50), rep("Toyota", 70))
runif(1)
brand <- c(rep("Honda", 50), rep("Toyota", 70))
safety <- ifelse(runif(1)<0.1, "one", ifelse(runif<0.3, "two", "three"))
set.seed(3)
safety <- ifelse(runif(1)<0.1, "one", ifelse(runif(1)<0.3, "two", "three"))
safety
runif(120)
safety <- ifelse(runif(120)<0.1, "one", ifelse(runif(120)<0.3, "two", "three"))
safety
require(mosaic)
safetytable<-tally(~brand+safety,margins=F)
safetytable
stars <- ifelse(runif(120)<0.1, "one", ifelse(runif(120)<0.3, "two", "three"))
safetytable<-tally(~brand+stars,margins=F)
safetytable
set.seed(3)
stars <- ifelse(runif(120)<0.1, "one", ifelse(runif(120)<0.3, "two", "three"))
safetytable<-tally(~brand+stars,margins=F)
safetytable
stars <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three", ifelse(runif(70)<0.4, "one", ifelse(runif(50)<0.7, "two", "three"))
require(mosaic)
stars <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three", ifelse(runif(70)<0.4, "one", ifelse(runif(50)<0.7, "two", "three"))
require(mosaic)
stars <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three", ifelse(runif(70)<0.4, "one", ifelse(runif(50)<0.7, "two", "three"))))
stars <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three", ifelse(runif(70)<0.4, "one", ifelse(runif(50)<0.7, "two", "three"))))
starsH <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three")) starsT <- ifelse(runif(70)<0.4, "one", ifelse(runif(50)<0.7, "two", "three"))))
starsH <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three")) starsT <- ifelse(runif(70)<0.4, "one", ifelse(runif(50)<0.7, "two", "three"))
starsH <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three")) starsT <- ifelse(runif(70)<0.4, "one", ifelse(runif(50)<0.7, "two", "three"))
starsH <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three")) starsT <- ifelse(runif(70)<0.4, "one", ifelse(runif(70)<0.7, "two", "three"))
starsH <- ifelse(runif(50)<0.1, "one", ifelse(runif(50)<0.3, "two", "three"))
starsT <- ifelse(runif(70)<0.4, "one", ifelse(runif(70)<0.7, "two", "three"))
stars <- c(starsH, starsT)
safetytable<-tally(~brand+stars,margins=F)
safetytable
brand <- c(rep("Honda", 30), rep("Toyota", 70))
set.seed(3)
starsH <- ifelse(runif(30)<0.1, "one", ifelse(runif(30)<0.3, "two", "three"))
starsT <- ifelse(runif(70)<0.4, "one", ifelse(runif(70)<0.7, "two", "three"))
stars <- c(starsH, starsT)
require(mosaic)
safetytable<-tally(~brand+stars,margins=F)
safetytable
plot(stars~brand ,main="Stacked Bar Chart of Safety Data")
plot(stars~brand, main="Stacked Bar Chart of Safety Data")
plot(brand, stars, main="Stacked Bar Chart of Safety Data")
brand
stars
is.factor(brand)
is.factor(stars)
brand <- as.factor(brand)
stars <- as.factor(stars)
safetytable<-tally(~brand+stars,margins=F)
safetytable
plot(brand, stars, main="Stacked Bar Chart of Safety Data")
chisq.test(safetytable)
safetytable<-tally(~brand+stars,margins=F)
safetytable<-tally(~brand+stars,margins=T)
safetytable
safetytable<-tally(~brand+stars,margins=F)
chisq.test(safetytable)$expected
safetytable-chisq.test(safetytable)$expected/sqrt(chisq.test(safetytable)$expected)
contr <- safetytable-chisq.test(safetytable)$expected/sqrt(chisq.test(safetytable)$expected)
contr
contr <- (safetytable-chisq.test(safetytable)$expected)/sqrt(chisq.test(safetytable)$expected)
contr
-7/3
contr <- (safetytable-chisq.test(safetytable)$expected)^2/sqrt(chisq.test(safetytable)$expected)
contr
(-7/3)^2
contr <- ((safetytable-chisq.test(safetytable)$expected)/sqrt(chisq.test(safetytable)$expected))^2
contr
sum(contr)
require(mosaic)
stress$Differences <- stress$PSSafter-stress$PSSbefore
require(mosaic)
stress <- read.table("~/Documents/Stat217Spring2015/Projects/Project 1/stress.csv", header=TRUE, quote="\"")
View(stress)
stress$Differences <- stress$PSSafter-stress$PSSbefore
favstats(Differences~Group, data=stress)
require(beanplot)
beanplot(Differences~Group, data=stress,method="jitter",log="",col=7)
#Permutation test
Tobs <- diffmean(Differences ~ Group, data = stress) ## this is the observed diff in means
B <- 1000 ## this is how many permutations you want
Tstar <- matrix(NA, nrow = B) ## setting up empty slots to put our permutation statistics in
for (b in 1:B) {
Tstar[b] <- diffmean(Differences ~ shuffle(Group), data = stress) ## the bth permutation stat
}
par(mfrow = c(1, 2)) ## telling R to put the two plots side by side
hist(Tstar)
abline(v = Tobs, lwd = 2) ## adding a line for the observed statistic
abline(v = -Tobs, lwd = 2)
plot(density(Tstar), main = "Density Plot of Tstar", xlab = "")
abline(v = Tobs, lwd = 2)
B <- 1000 ## this is how many permutations you want
pdata(abs(Tobs), abs(Tstar), lower.tail = F)
